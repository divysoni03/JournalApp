package com.firstproject.firstproject.entity;

import lombok.*;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

/*
*-> HERE we use ORM (OBJECT RELATIONAL MAPPING) which is a technique to map the object in java with database entity/ document
*       so the annotation we use over the class to define it as ENTITY (mysql) / DOCUMENT (mongo) is used because we are basically doing the ORM thing
*       we will specify the id and all that things in here so the database can map all this things
*
*       the way we implement this ORM thing is ->
*
*           A JPA Repository is an interface that allows users to perform CRUD (Create, Read, Update, Delete) operations on a database table. It's part of the Spring Data JPA framework.
*
*           JPA Repositories are built on top of the CrudRepository and PagingAndSortingRepository interfaces.
            They provide a set of methods for common database operations.
            They allow users to work with Java objects instead of writing complex SQL queries.
            Spring Data JPA translates these operations into database commands.
* */
// just like entity in mysql project here in mongodb every row is defined as document so we will use annotation @Document
@Document(collection = "journal_entries") // if we don't specify the NAME of the collection then it will find the collection named as the name of the class we defined below in our case = 'Journal'
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
//@Data -> if we write @Data annotation then getter, setter, toString, equals and hashcode all will be generated automatically so we don't have to write all the annotations

public class Journal {
    @Id
    // private String id;
    private ObjectId id; // now this ObjectId auto generated by mongodb, we can't pass now, before this if we pass the key then db stores that key and if we don't pass the key then the db auto generates the unique key that why now we can't pass the key and everytime mongodb will generate unique for us

    @NonNull // same as we used in users entity
    private String title;
    private String content;
    private LocalDateTime date;
}
